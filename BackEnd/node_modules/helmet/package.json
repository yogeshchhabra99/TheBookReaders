{
  "_from": "helmet",
  "_id": "helmet@4.0.0",
  "_inBundle": false,
  "_integrity": "sha512-HyoRKKHhWhO6+EBfgRLkuZR4/+NXc1nJB7x0bWwW89i9eoPciK0qUqyZNOA/zowpgrW9C4+J5toqMkZrpBOlkg==",
  "_location": "/helmet",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "helmet",
    "fetchSpec": "latest",
    "name": "helmet",
    "raw": "helmet",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/helmet/-/helmet-4.0.0.tgz",
  "_shasum": "34c187894ed001834f997c688f2b2df19846b193",
  "_spec": "helmet",
  "_where": "C:\\Users\\asus\\Documents\\GitHub\\TheBookReaders\\BackEnd",
  "author": {
    "email": "adam@npmjs.com",
    "name": "Adam Baldwin",
    "url": "https://evilpacket.net"
  },
  "bugs": {
    "email": "me@evanhahn.com",
    "url": "https://github.com/helmetjs/helmet/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "https://evanhahn.com"
    },
    {
      "name": "Ameen Abdeen",
      "email": "ameen.abdeen.se@gmail.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "help secure Express/Connect apps with various HTTP headers",
  "devDependencies": {
    "@types/connect": "^3.4.33",
    "@types/jest": "^26.0.8",
    "@types/supertest": "^2.0.10",
    "@typescript-eslint/eslint-plugin": "^3.7.1",
    "@typescript-eslint/parser": "^3.7.1",
    "connect": "^3.7.0",
    "eslint": "^7.6.0",
    "jest": "^26.2.2",
    "prettier": "^2.0.5",
    "supertest": "^4.0.2",
    "ts-jest": "^26.1.4",
    "typescript": "^3.9.7"
  },
  "engines": {
    "node": ">=10.0.0"
  },
  "files": [
    "CHANGELOG.md",
    "CODE_OF_CONDUCT.md",
    "CONTRIBUTING.md",
    "LICENSE",
    "README.md",
    "SECURITY.md",
    "dist/index.d.ts",
    "dist/index.js",
    "dist/middlewares/content-security-policy/index.d.ts",
    "dist/middlewares/content-security-policy/index.js",
    "dist/middlewares/expect-ct/index.d.ts",
    "dist/middlewares/expect-ct/index.js",
    "dist/middlewares/referrer-policy/index.d.ts",
    "dist/middlewares/referrer-policy/index.js",
    "dist/middlewares/strict-transport-security/index.d.ts",
    "dist/middlewares/strict-transport-security/index.js",
    "dist/middlewares/x-content-type-options/index.d.ts",
    "dist/middlewares/x-content-type-options/index.js",
    "dist/middlewares/x-dns-prefetch-control/index.d.ts",
    "dist/middlewares/x-dns-prefetch-control/index.js",
    "dist/middlewares/x-download-options/index.d.ts",
    "dist/middlewares/x-download-options/index.js",
    "dist/middlewares/x-frame-options/index.d.ts",
    "dist/middlewares/x-frame-options/index.js",
    "dist/middlewares/x-permitted-cross-domain-policies/index.d.ts",
    "dist/middlewares/x-permitted-cross-domain-policies/index.js",
    "dist/middlewares/x-powered-by/index.d.ts",
    "dist/middlewares/x-powered-by/index.js",
    "dist/middlewares/x-xss-protection/index.d.ts",
    "dist/middlewares/x-xss-protection/index.js"
  ],
  "homepage": "https://helmetjs.github.io/",
  "keywords": [
    "express",
    "headers",
    "security"
  ],
  "license": "MIT",
  "main": "dist/index",
  "name": "helmet",
  "optionalDependencies": {},
  "readme": "# Helmet\n\n[![npm version](https://badge.fury.io/js/helmet.svg)](http://badge.fury.io/js/helmet)\n[![npm dependency status](https://david-dm.org/helmetjs/helmet.svg)](https://david-dm.org/helmetjs/helmet)\n[![Build Status](https://travis-ci.org/helmetjs/helmet.svg?branch=master)](https://travis-ci.org/helmetjs/helmet)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet?ref=badge_shield)\n\nHelmet helps you secure your Express apps by setting various HTTP headers. _It's not a silver bullet_, but it can help!\n\n## Quick start\n\nFirst, run `npm install helmet --save` for your app. Then, in an Express app:\n\n```js\nconst express = require(\"express\");\nconst helmet = require(\"helmet\");\n\nconst app = express();\n\napp.use(helmet());\n\n// ...\n```\n\n## How it works\n\nHelmet is [Connect](https://github.com/senchalabs/connect)-style middleware, which is compatible with frameworks like [Express](https://expressjs.com/). (If you need support for Koa, see [`koa-helmet`](https://github.com/venables/koa-helmet).)\n\nThe top-level `helmet` function is a wrapper around 11 smaller middlewares.\n\nIn other words, these two things are equivalent:\n\n```js\n// This...\napp.use(helmet());\n\n// ...is equivalent to this:\napp.use(helmet.contentSecurityPolicy());\napp.use(helmet.dnsPrefetchControl());\napp.use(helmet.expectCt());\napp.use(helmet.frameguard());\napp.use(helmet.hidePoweredBy());\napp.use(helmet.hsts());\napp.use(helmet.ieNoOpen());\napp.use(helmet.noSniff());\napp.use(helmet.permittedCrossDomainPolicies());\napp.use(helmet.referrerPolicy());\napp.use(helmet.xssFilter());\n```\n\n## Reference\n\n<details>\n<summary><code>helmet(options)</code></summary>\n\nHelmet is the top-level middleware for this module, including all 11 others.\n\nAll 11 middlewares are enabled by default.\n\n```js\n// Includes all 11 middlewares\napp.use(helmet());\n```\n\nIf you want to disable one, pass options to `helmet`. For example, to disable `frameguard`:\n\n```js\n// Includes 10 middlewares, skipping `helmet.frameguard`\napp.use(\n  helmet({\n    frameguard: false,\n  })\n);\n```\n\nMost of the middlewares have options, which are documented in more detail below. For example, to pass `{ action: \"deny\" }` to `frameguard`:\n\n```js\n// Includes all 11 middlewares, setting an option for `helmet.frameguard`\napp.use(\n  helmet({\n    frameguard: {\n      action: \"deny\",\n    },\n  })\n);\n```\n\nEach middleware's name is listed below.\n\n</details>\n\n<details>\n<summary><code>helmet.contentSecurityPolicy(options)</code></summary>\n\n`helmet.contentSecurityPolicy` sets the `Content-Security-Policy` header which helps mitigate cross-site scripting attacks, among other things. See [MDN's introductory article on Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\nThis middleware performs very little validation. You should rely on CSP checkers like [CSP Evaluator](https://csp-evaluator.withgoogle.com/) instead.\n\n`options.directives` is an object. Each key is a directive name in camel case (such as `defaultSrc`) or kebab case (such as `default-src`). Each value is an iterable (usually an array) of strings for that directive.\n\n`options.reportOnly` is a boolean, defaulting to `false`. If `true`, [the `Content-Security-Policy-Report-Only` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only) will be set instead.\n\nIf no directives are supplied, the following policy is set (whitespace added for readability):\n\n    default-src 'self';\n    base-uri 'self';\n    block-all-mixed-content;\n    font-src 'self' https: data:;\n    frame-ancestors 'self';\n    img-src 'self' data:;\n    object-src 'none';\n    script-src 'self';\n    script-src-attr 'none';\n    style-src 'self' https: 'unsafe-inline';\n    upgrade-insecure-requests\n\nExamples:\n\n```js\n// Sets \"Content-Security-Policy: default-src 'self';script-src 'self' example.com;object-src 'none';upgrade-insecure-requests\"\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"example.com\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: [],\n    },\n  })\n);\n\n// Sets \"Content-Security-Policy: default-src 'self';script-src 'self' example.com;object-src 'none'\"\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      \"default-src\": [\"'self'\"],\n      \"script-src\": [\"'self'\", \"example.com\"],\n      \"object-src\": [\"'none'\"],\n    },\n  })\n);\n\n// Sets the \"Content-Security-Policy-Report-Only\" header instead\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      /* ... */\n    },\n    reportOnly: true,\n  })\n);\n```\n\nSee [this wiki page](https://github.com/helmetjs/helmet/wiki/Conditionally-using-middleware#i-want-to-use-some-middleware-with-different-options) to see how to set directives conditionally (to set per-request nonces, for example).\n\nYou can install this module separately as `helmet-csp`.\n\n</details>\n\n<details>\n<summary><code>helmet.expectCt(options)</code></summary>\n\n`helmet.expectCt` sets the `Expect-CT` header which helps mitigate misissued SSL certificates. See [MDN's article on Certificate Transparency](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) and the [`Expect-CT` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT) for more.\n\n`options.maxAge` is the number of seconds to expect Certificate Transparency. It defaults to `0`.\n\n`options.enforce` is a boolean. If `true`, the user agent (usually a browser) should refuse future connections that violate its Certificate Transparency policy. Defaults to `false`.\n\n`options.reportUri` is a string. If set, complying user agents will report Certificate Transparency failures to this URL. Unset by default.\n\nExamples:\n\n```js\n// Sets \"Expect-CT: max-age=86400\"\napp.use(\n  helmet.expectCt({\n    maxAge: 86400,\n  })\n);\n\n// Sets \"Expect-CT: max-age=86400, enforce, report-uri=\"https://example.com/report\"\napp.use(\n  helmet.expectCt({\n    maxAge: 86400,\n    enforce: true,\n    reportUri: \"https://example.com/report\",\n  })\n);\n```\n\nYou can install this module separately as `expect-ct`.\n\n</details>\n\n<details>\n<summary><code>helmet.referrerPolicy(options)</code></summary>\n\n`helmet.referrerPolicy` sets the `Referrer-Policy` header which controls what information is set in [the `Referer` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer). See [\"Referer header: privacy and security concerns\"](https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns) and [the header's documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) on MDN for more.\n\n`options.policy` is a string or array of strings representing the policy. If passed as an array, it will be joined with commas, which is useful when setting [a fallback policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#Specifying_a_fallback_policy). It defaults to `no-referrer`.\n\nExamples:\n\n```js\n// Sets \"Referrer-Policy: no-referrer\"\napp.use(\n  helmet.referrerPolicy({\n    policy: \"no-referrer\",\n  })\n);\n\n// Sets \"Referrer-Policy: origin,unsafe-url\"\napp.use(\n  helmet.referrerPolicy({\n    policy: [\"origin\", \"unsafe-url\"],\n  })\n);\n```\n\nYou can install this module separately as `referrer-policy`.\n\n</details>\n\n<details>\n<summary><code>helmet.hsts(options)</code></summary>\n\n`helmet.hsts` sets the `Strict-Transport-Security` header which tells browsers to prefer HTTPS over insecure HTTP. See [the documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) for more.\n\n`options.maxAge` is the number of seconds browsers should remember to prefer HTTPS. If passed a non-integer, the value is rounded down. It defaults to `15552000`, which is 180 days.\n\n`options.includeSubDomains` is a boolean which dictates whether to include the `includeSubDomains` directive, which makes this policy extend to subdomains. It defaults to `true`.\n\n`options.preload` is a boolean. If true, it adds the `preload` directive, expressing intent to add your HSTS policy to browsers. See [the \"Preloading Strict Transport Security\" section on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security#Preloading_Strict_Transport_Security) for more. It defaults to `false`.\n\nExamples:\n\n```js\n// Sets \"Strict-Transport-Security: max-age=123456; includeSubDomains\"\napp.use(\n  helmet.strictTransportSecurity({\n    maxAge: 123456,\n  })\n);\n\n// Sets \"Strict-Transport-Security: max-age=123456\"\napp.use(\n  helmet.strictTransportSecurity({\n    maxAge: 123456,\n    includeSubDomains: false,\n  })\n);\n\n// Sets \"Strict-Transport-Security: max-age=123456; includeSubDomains; preload\"\napp.use(\n  helmet.strictTransportSecurity({\n    maxAge: 63072000,\n    preload: true,\n  })\n);\n```\n\nYou can install this module separately as `hsts`.\n\n</details>\n\n<details>\n<summary><code>helmet.noSniff()</code></summary>\n\n`helmet.noSniff` sets the `X-Content-Type-Options` header to `nosniff`. This mitigates [MIME type sniffing](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing) which can cause security vulnerabilities. See [documentation for this header on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) for more.\n\nThis middleware takes no options.\n\nExample:\n\n```js\n// Sets \"X-Content-Type-Options: nosniff\"\napp.use(helmet.noSniff());\n```\n\nYou can install this module separately as `dont-sniff-mimetype`.\n\n</details>\n\n<details>\n<summary><code>helmet.dnsPrefetchControl(options)</code></summary>\n\n`helmet.dnsPrefetchControl` sets the `X-DNS-Prefetch-Control` header to help control DNS prefetching, which can improve user privacy at the expense of performance. See [documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) for more.\n\n`options.allow` is a boolean dictating whether to enable DNS prefetching. It defaults to `false`.\n\nExamples:\n\n```js\n// Sets \"X-DNS-Prefetch-Control: off\"\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: false,\n  })\n);\n\n// Sets \"X-DNS-Prefetch-Control: on\"\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: true,\n  })\n);\n```\n\nYou can install this module separately as `dns-prefetch-control`.\n\n</details>\n\n<details>\n<summary><code>helmet.ieNoOpen()</code></summary>\n\n`helmet.ieNoOpen` sets the `X-Download-Options` header, which is specific to Internet Explorer 8. It forces potentially-unsafe downloads to be saved, mitigating execution of HTML in your site's context. For more, see [this old post on MSDN](https://docs.microsoft.com/en-us/archive/blogs/ie/ie8-security-part-v-comprehensive-protection).\n\nThis middleware takes no options.\n\nExamples:\n\n```js\n// Sets \"X-Download-Options: noopen\"\napp.use(helmet.ieNoOpen());\n```\n\nYou can install this module separately as `ienoopen`.\n\n</details>\n\n<details>\n<summary><code>helmet.frameguard(options)</code></summary>\n\n`helmet.frameguard` sets the `X-Frame-Options` header to help you mitigate [clickjacking attacks](https://en.wikipedia.org/wiki/Clickjacking). This header is superseded by [the `frame-ancestors` Content Security Policy directive](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) but is still useful on old browsers. For more, see [the documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options).\n\n`options.action` is a string that specifies which directive to use—either `DENY` or `SAMEORIGIN`. (A legacy directive, `ALLOW-FROM`, is not supported by this middleware. [Read more here.](https://github.com/helmetjs/helmet/wiki/How-to-use-X%E2%80%93Frame%E2%80%93Options's-%60ALLOW%E2%80%93FROM%60-directive)) It defaults to `SAMEORIGIN`.\n\nExamples:\n\n```js\n// Sets \"X-Frame-Options: DENY\"\napp.use(\n  helmet.frameguard({\n    action: \"deny\",\n  })\n);\n\n// Sets \"X-Frame-Options: SAMEORIGIN\"\napp.use(\n  helmet.frameguard({\n    action: \"sameorigin\",\n  })\n);\n```\n\nYou can install this module separately as `frameguard`.\n\n</details>\n\n<details>\n<summary><code>helmet.permittedCrossDomainPolicies(options)</code></summary>\n\n`helmet.permittedCrossDomainPolicies` sets the `X-Permitted-Cross-Domain-Policies` header, which tells some clients (mostly Adobe products) your domain's policy for loading cross-domain content. See [the description on OWASP](https://owasp.org/www-project-secure-headers/) for more.\n\n`options.permittedPolicies` is a string that must be `\"none\"`, `\"master-only\"`, `\"by-content-type\"`, or `\"all\"`. It defaults to `\"none\"`.\n\nExamples:\n\n```js\n// Sets \"X-Permitted-Cross-Domain-Policies: none\"\napp.use(\n  helmet.permittedCrossDomainPolicies({\n    permittedPolicies: \"none\",\n  })\n);\n\n// Sets \"X-Permitted-Cross-Domain-Policies: by-content-type\"\napp.use(\n  helmet.permittedCrossDomainPolicies({\n    permittedPolicies: \"by-content-type\",\n  })\n);\n```\n\nYou can install this module separately as `helmet-crossdomain`.\n\n</details>\n\n<details>\n<summary><code>helmet.hidePoweredBy(options)</code></summary>\n\n`helmet.hidePoweredBy` removes the `X-Powered-By` header, which is set by default in some frameworks (like Express). Removing the header offers very limited security benefits (see [this discussion](https://github.com/expressjs/express/pull/2813#issuecomment-159270428)) and is mostly removed to save bandwidth.\n\nThis middleware takes no options.\n\nIf you're using Express, this middleware will work, but you should use `app.disable(\"x-powered-by\")` instead.\n\nExamples:\n\n```js\n// Removes the X-Powered-By header if it was set.\napp.use(helmet.hidePoweredBy());\n```\n\nYou can install this module separately as `hide-powered-by`.\n\n</details>\n\n<details>\n<summary><code>helmet.xssFilter(options)</code></summary>\n\n`helmet.xssFilter` disables browsers' buggy cross-site scripting filter by setting the `X-XSS-Protection` header to `0`. See [discussion about disabling the header here](https://github.com/helmetjs/helmet/issues/230) and [documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection).\n\nThis middleware takes no options.\n\nExamples:\n\n```js\n// Sets \"X-XSS-Protection: 0\"\napp.use(helmet.xssFilter());\n```\n\nYou can install this module separately as `x-xss-protection`.\n\n</details>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/helmet.git"
  },
  "scripts": {
    "build": "npm run clean && tsc",
    "build-middleware-package": "npm run build && ./bin/build-middleware-package.js",
    "clean": "rm -rf dist",
    "format": "prettier --write \"**/*{md,js,json,ts}\"",
    "lint": "npm run lint:eslint && npm run lint:prettier",
    "lint:eslint": "eslint \"**/*.ts\"",
    "lint:prettier": "prettier --check \"**/*{md,js,json,ts}\"",
    "prepublishOnly": "npm run build",
    "pretest": "npm run lint",
    "test": "jest"
  },
  "version": "4.0.0"
}
